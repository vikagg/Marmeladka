
const currentUser = JSON.parse(localStorage.getItem('currentUser'));
if (!currentUser || currentUser.role !== 'admin') {
  alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!');
  window.location.href = 'index.html';
}

class SupabaseUploader {
    constructor() {
        this.supabaseUrl = 'https://vbjrfcgxzwjsgyadxlql.supabase.co';
        this.supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZianJmY2d4endqc2d5YWR4bHFsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzMzQ1MjksImV4cCI6MjA3MzkxMDUyOX0.M4vNHAfj5XQlKCModUpCGVfpJ1TYB0EcDaMOt0ODF8k';
        this.bucketName = 'Marmeladka';
        this.supabase = supabase.createClient(this.supabaseUrl, this.supabaseKey);
    }

    generateFileName(file) {
        const timestamp = Date.now();
        const randomString = Math.random().toString(36).substring(2, 15);
        const extension = file.name.split('.').pop();
        return `service_${timestamp}_${randomString}.${extension}`;
    }

    async uploadFile(file) {
        try {
            const fileName = this.generateFileName(file);

            const { data, error } = await this.supabase.storage
                .from(this.bucketName)
                .upload(fileName, file);

            if (error) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
            }

            const { data: publicUrlData } = this.supabase.storage
                .from(this.bucketName)
                .getPublicUrl(fileName);

            return {
                success: true,
                url: publicUrlData.publicUrl,
                fileName: fileName
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Supabase:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

const uploader = new SupabaseUploader();

// --- PRODUCT MANAGEMENT ---
async function getProducts() {
    try {
        const response = await fetch('/api/products');
        if (!response.ok) return [];
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        return [];
    }
}

async function renderProducts() {
  const products = await getProducts();
  const tableBody = document.querySelector('#productTable tbody');

  if (!products || !products.length) {
    tableBody.innerHTML = '<tr><td colspan="6">–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç</td></tr>';
    return;
  }

  tableBody.innerHTML = products.map((p, i) => `
    <tr>
      <td>${i + 1}</td>
      <td><img src="${p.image}" alt="${p.name}" width="50"></td>
      <td>${p.name}</td>
      <td>${p.description}</td>
      <td>${p.price} ‚ÇΩ</td>
      <td>
        <button class="edit-btn action-btn" data-id="${p.id}">‚úèÔ∏è</button>
        <button class="delete-btn action-btn" data-id="${p.id}">üóëÔ∏è</button>
      </td>
    </tr>
  `).join('');

  document.querySelectorAll('.delete-btn').forEach(btn =>
    btn.addEventListener('click', () => deleteProduct(btn.dataset.id))
  );

  document.querySelectorAll('.edit-btn').forEach(btn =>
    btn.addEventListener('click', () => editProduct(btn.dataset.id))
  );
}

function setupImageUpload() {
  const fileInput = document.getElementById('imageUpload');
  const uploadBtn = document.getElementById('uploadBtn');
  const imageInput = document.getElementById('image');
  const uploadStatus = document.getElementById('uploadStatus');

  uploadBtn.addEventListener('click', () => {
    fileInput.click();
  });

  fileInput.addEventListener('change', async (event) => {
    const file = event.target.files[0];

    if (!file) return;

    if (!file.type.startsWith('image/')) {
      uploadStatus.textContent = '–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      uploadStatus.className = 'upload-status error';
      return;
    }

    try {
      uploadStatus.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
      uploadStatus.className = 'upload-status';

      const result = await uploader.uploadFile(file);

      if (result.success) {
        imageInput.value = result.url;
        uploadStatus.textContent = '–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!';
        uploadStatus.className = 'upload-status success';
      } else {
        uploadStatus.textContent = result.error;
        uploadStatus.className = 'upload-status error';
      }
    } catch (error) {
      uploadStatus.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
      uploadStatus.className = 'upload-status error';
    }
  });
}

async function addProduct(e) {
  e.preventDefault();
  const name = document.querySelector('#name').value.trim();
  const price = document.querySelector('#price').value.trim();
  const description = document.querySelector('#description').value.trim();
  const image = document.querySelector('#image').value.trim();

  if (!name || !price || !description || !image) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
    return;
  }

  const newProduct = {
    name,
    price: Number(price),
    description,
    image
  };

  try {
    const response = await fetch('/api/products', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newProduct)
    });

    if (response.ok) {
      renderProducts();
      e.target.reset();
      const uploadStatus = document.getElementById('uploadStatus');
      uploadStatus.textContent = '';
      uploadStatus.className = 'upload-status';
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  } catch (error) {
    alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
  }
}

async function deleteProduct(id) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
    try {
      const response = await fetch(`/api/products/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        renderProducts();
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }
}

async function editProduct(id) {
  const products = await getProducts();
  const product = products.find(p => String(p.id) === String(id));

  if (!product) return;

  const name = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', product.name);
  const description = prompt('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', product.description);
  const price = prompt('–ù–æ–≤–∞—è —Ü–µ–Ω–∞:', product.price);
  const image = prompt('–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:', product.image);

  if (name && description && price && image) {
    const updatedProduct = {
      name,
      description,
      price: Number(price),
      image
    };

    try {
      const response = await fetch(`/api/products/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedProduct)
      });

      if (response.ok) {
        renderProducts();
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  }
}

document.querySelector('#productForm').addEventListener('submit', addProduct);
setupImageUpload();
renderProducts();


// --- USER MANAGEMENT ---

async function getUsers() {
    try {
        const response = await fetch('/api/users');
        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.status, response.statusText);
            return [];
        }
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–µ—Ç—å –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON):', error);
        return [];
    }
}

async function renderUsers() {
    const users = await getUsers();
    const tableBody = document.querySelector('#userTable tbody');

    if (!tableBody) {
        console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç tbody —Å id "userTable tbody". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É.');
        return;
    }

    if (!users || users.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç</td></tr>';
        return;
    }

    tableBody.innerHTML = users.map((user, i) => `
        <tr>
            <td>${i + 1}</td>
            <td>${user.username}</td>
            <td>${user.password}</td>
            <td>${user.name}</td>
            <td>${user.role}</td>
            <td>
                <button class="edit-user-btn action-btn" data-id="${user.id}">‚úèÔ∏è</button>
                <button class="delete-user-btn action-btn" data-id="${user.id}">üóëÔ∏è</button>
            </td>
        </tr>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.edit-user-btn').forEach(btn =>
        btn.addEventListener('click', () => editUser(btn.dataset.id))
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelectorAll('.delete-user-btn').forEach(btn =>
        btn.addEventListener('click', () => deleteUser(btn.dataset.id))
    );
}

async function editUser(id) {
    const users = await getUsers();
    const user = users.find(u => String(u.id) === String(id));

    if (!user) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }

    const username = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:', user.username);
    if (username === null) return;

    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', user.name);
    if (name === null) return;

    const role = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (admin –∏–ª–∏ user):', user.role);
    if (role === null) return;

    const password = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):', '');
    if (password === null) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (username.trim() && name.trim() && (role.trim() === 'admin' || role.trim() === 'user')) {
        const updatedUser = {
            username: username.trim(),
            name: name.trim(),
            role: role.trim()
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω
        if (password.trim() !== '') {
            updatedUser.password = password.trim();
        }

        try {
            const response = await fetch(`/api/users/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedUser)
            });

            const result = await response.json();

            if (response.ok) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
                renderUsers();
            } else {
                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${result.error}`);
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –õ–æ–≥–∏–Ω –∏ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏, –∞ —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "admin" –∏–ª–∏ "user".');
    }
}

async function deleteUser(id) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        return;
    }

    try {
        const response = await fetch(`/api/users/${id}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (response.ok) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            renderUsers();
        } else {
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${result.error}`);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

async function addUser(e) {
    e.preventDefault();

    const usernameInput = document.querySelector('#userLogin');
    const nameInput = document.querySelector('#userName');
    const roleInput = document.querySelector('#userRole');
    const passwordInput = document.querySelector('#userPassword');

    if (!usernameInput || !nameInput || !roleInput || !passwordInput) {
        console.error('–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML!');
        alert('–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ HTML.');
        return;
    }

    const username = usernameInput.value.trim();
    const name = nameInput.value.trim();
    const role = roleInput.value;
    const password = passwordInput.value.trim();

    if (!username || !name || !role || !password) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        return;
    }

    if (role !== 'admin' && role !== 'user') {
        alert('–†–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "admin" –∏–ª–∏ "user"');
        return;
    }

    const newUser = {
        username: username,
        password: password,
        name: name,
        role: role
    };

    try {
        const response = await fetch('/api/users', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newUser)
        });

        const result = await response.json();

        if (response.ok) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
            renderUsers();
            e.target.reset();
        } else {
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${result.error}`);
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
document.addEventListener('DOMContentLoaded', () => {
    const userForm = document.getElementById('userForm');
    if (userForm) {
        userForm.addEventListener('submit', addUser);
    } else {
        console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —Å id "userForm". –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ HTML.');
    }

    renderUsers();
});